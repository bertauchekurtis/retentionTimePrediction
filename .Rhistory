data$unmodE <- str_count(data$Peptide.Sequence2, "E")
data$unmodF <- str_count(data$Peptide.Sequence2, "F")
data$unmodG <- str_count(data$Peptide.Sequence2, "G")
data$unmodH <- str_count(data$Peptide.Sequence2, "H")
data$unmodI <- str_count(data$Peptide.Sequence2, "I")
data$unmodK <- str_count(data$Peptide.Sequence2, "K")
data$unmodL <- str_count(data$Peptide.Sequence2, "L")
data$unmodM <- str_count(data$Peptide.Sequence2, "M")
data$unmodN <- str_count(data$Peptide.Sequence2, "N")
data$unmodP <- str_count(data$Peptide.Sequence2, "P")
data$unmodQ <- str_count(data$Peptide.Sequence2, "Q")
data$unmodR <- str_count(data$Peptide.Sequence2, "R")
data$unmodS <- str_count(data$Peptide.Sequence2, "S")
data$unmodT <- str_count(data$Peptide.Sequence2, "T")
data$unmodV <- str_count(data$Peptide.Sequence2, "V")
data$unmodW <- str_count(data$Peptide.Sequence2, "W")
data$unmodY <- str_count(data$Peptide.Sequence2, "Y")
data$modS <- str_count(data$Peptide.Sequence2, "s")
data$modT <- str_count(data$Peptide.Sequence2, "t")
data$modY <- str_count(data$Peptide.Sequence2, "y")
data$modM <- str_count(data$Peptide.Sequence2, "m")
# split data into trainng/testing sets
setAssignments <- sample(1:2, size = nrow(data), prob = c(0.8, 0.2), replace = TRUE)
trainingData <- data[setAssignments == 1,]
testingData <- data[setAssignments == 2,]
foldid <- sample(rep(seq(5), length.out = nrow(trainingData)))
# create training data without retention time
Xtrain <- model.matrix(RetentionTime ~ unmodA+unmodC+unmodD+unmodE+unmodF+
unmodG+unmodH+unmodI+unmodK+unmodL+
unmodM+unmodN+unmodP+unmodQ+unmodR+
unmodS+unmodT+unmodV+unmodW+unmodY+
modS+modY+modT+modM+peptideLength, trainingData)[, -1]
fit_lasso_cv_mse <- cv.glmnet(Xtrain, trainingData$RetentionTime, alpha = 1, nfolds = 5, foldid = foldid)
bestModelminLambda <- glmnet(x = Xtrain,
y = trainingData$RetentionTime,
lambda = fit_lasso_cv_mse$lambda.min,
alpha = 1)
bestModelOneSELambda <- glmnet(x = Xtrain,
y = trainingData$RetentionTime,
lambda = fit_lasso_cv_mse$lambda.1se,
alpha = 1)
# testing for min lambda
Xtest = model.matrix(RetentionTime ~ unmodA+unmodC+unmodD+unmodE+unmodF+
unmodG+unmodH+unmodI+unmodK+unmodL+
unmodM+unmodN+unmodP+unmodQ+unmodR+
unmodS+unmodT+unmodV+unmodW+unmodY+
modS+modY+modT+modM+peptideLength, testingData)[, -1]
predictions <- predict(bestModelminLambda, newx = Xtest)
residuals <- testingData$RetentionTime - predictions
# analysis for min lambda
print("RMSE:") # RMSE calculation
sqrt(mean(((residuals))^2))
print("MAE:")# MAE calculation
mean(abs(residuals))
# calculate 95% error window size
q <- quantile(residuals, probs =c(.025,.975))
abs(q[1]) + abs(q[2]) # total length of window
# correlation
cor(predictions, testingData$RetentionTime)
# testing for lambda 1 SE
predictions <- predict(bestModelOneSELambda, newx = Xtest)
residuals <- testingData$RetentionTime - predictions
# analysis for lambda 1 SE
print("RMSE:") # RMSE calculation
sqrt(mean(((residuals))^2))
print("MAE:")# MAE calculation
mean(abs(residuals))
# calculate 95% error window size
q <- quantile(residuals, probs =c(.025,.975))
abs(q[1]) + abs(q[2]) # total length of window
# correlation
cor(predictions, testingData$RetentionTime)
# data <- read.csv(file = "C:/Users/Kurtis/Desktop/Research/data/RetentionTime_HCD_Marx2013_SuppT3.csv")
data <- read.csv(file = "C:/Users/Kurtis/Desktop/Research/RScripts/Updated/dataSetTwoFiltered.csv")
data$X <- NULL
colnames(data) <- c("Peptide.Sequence2", "RetentionTime")
set.seed(37)
library(caret)
library(stringr)
library(stats)
library(glmnet)
# predictor variables
data$peptideLength <- nchar(data$Peptide.Sequence2)
data$unmodA <- str_count(data$Peptide.Sequence2, "A")
data$unmodC <- str_count(data$Peptide.Sequence2, "C")
data$unmodD <- str_count(data$Peptide.Sequence2, "D")
data$unmodE <- str_count(data$Peptide.Sequence2, "E")
data$unmodF <- str_count(data$Peptide.Sequence2, "F")
data$unmodG <- str_count(data$Peptide.Sequence2, "G")
data$unmodH <- str_count(data$Peptide.Sequence2, "H")
data$unmodI <- str_count(data$Peptide.Sequence2, "I")
data$unmodK <- str_count(data$Peptide.Sequence2, "K")
data$unmodL <- str_count(data$Peptide.Sequence2, "L")
data$unmodM <- str_count(data$Peptide.Sequence2, "M")
data$unmodN <- str_count(data$Peptide.Sequence2, "N")
data$unmodP <- str_count(data$Peptide.Sequence2, "P")
data$unmodQ <- str_count(data$Peptide.Sequence2, "Q")
data$unmodR <- str_count(data$Peptide.Sequence2, "R")
data$unmodS <- str_count(data$Peptide.Sequence2, "S")
data$unmodT <- str_count(data$Peptide.Sequence2, "T")
data$unmodV <- str_count(data$Peptide.Sequence2, "V")
data$unmodW <- str_count(data$Peptide.Sequence2, "W")
data$unmodY <- str_count(data$Peptide.Sequence2, "Y")
data$modS <- str_count(data$Peptide.Sequence2, "s")
data$modT <- str_count(data$Peptide.Sequence2, "t")
data$modY <- str_count(data$Peptide.Sequence2, "y")
data$modM <- str_count(data$Peptide.Sequence2, "m")
# split data into trainng/testing sets
setAssignments <- sample(1:2, size = nrow(data), prob = c(0.8, 0.2), replace = TRUE)
trainingData <- data[setAssignments == 1,]
testingData <- data[setAssignments == 2,]
foldid <- sample(rep(seq(5), length.out = nrow(trainingData)))
# set cross validation
cv_5 <- trainControl(method = "cv", number = 5)
# create model
elasticNet = train(RetentionTime ~ unmodA+unmodC+unmodD+unmodE+unmodF+
unmodG+unmodH+unmodI+unmodK+unmodL+
unmodM+unmodN+unmodP+unmodQ+unmodR+
unmodS+unmodT+unmodV+unmodW+unmodY+
modS+modY+modT+modM+peptideLength ^ 2,
data = trainingData,
method = "glmnet",
trControl = cv_5,
foldid = foldid,
tuneLength = 25
)
# function to get best options
get_best_result = function(caret_fit) {
best = which(rownames(caret_fit$results) == rownames(caret_fit$bestTune))
best_result = caret_fit$results[best, ]
rownames(best_result) = NULL
best_result
}
# get best result
get_best_result(elasticNet)
# analyze best model
# make training data in format for glmnet
Xtrain <- model.matrix(RetentionTime ~ unmodA+unmodC+unmodD+unmodE+unmodF+
unmodG+unmodH+unmodI+unmodK+unmodL+
unmodM+unmodN+unmodP+unmodQ+unmodR+
unmodS+unmodT+unmodV+unmodW+unmodY+
modS+modY+modT+modM+peptideLength, trainingData)[, -1]
# build the best model with results from above
bestModel <- glmnet(x = Xtrain,
y = trainingData$RetentionTime,
lambda = elasticNet$bestTune$lambda,
alpha = elasticNet$bestTune$alpha)
# make testing data in format for glmnet
Xtest <- model.matrix(RetentionTime ~ unmodA+unmodC+unmodD+unmodE+unmodF+
unmodG+unmodH+unmodI+unmodK+unmodL+
unmodM+unmodN+unmodP+unmodQ+unmodR+
unmodS+unmodT+unmodV+unmodW+unmodY+
modS+modY+modT+modM+peptideLength, testingData)[, -1]
# get predictions
predictions <- predict(bestModel, newx = Xtest)
residuals <- testingData$RetentionTime - predictions
# analysis for min lambda
print("RMSE:") # RMSE calculation
sqrt(mean(((residuals))^2))
print("MAE:")# MAE calculation
mean(abs(residuals))
# calculate 95% error window size
q <- quantile(residuals, probs =c(.025,.975))
abs(q[1]) + abs(q[2]) # total length of window
# correlation
cor(predictions, testingData$RetentionTime)
# data <- read.csv(file = "C:/Users/Kurtis/Desktop/Research/RScripts/Updated/dataSetTwoFiltered.csv")
data$X <- NULL
colnames(data) <- c("Peptide.Sequence2", "RetentionTime")data <- read.csv(file = "C:/Users/Kurtis/Desktop/Research/data/RetentionTime_HCD_Marx2013_SuppT3.csv")
set.seed(37)
# data <- read.csv(file = "C:/Users/Kurtis/Desktop/Research/data/RetentionTime_HCD_Marx2013_SuppT3.csv")
data <- read.csv(file = "C:/Users/Kurtis/Desktop/Research/RScripts/Updated/dataSetTwoFiltered.csv")
data$X <- NULL
colnames(data) <- c("Peptide.Sequence2", "RetentionTime")
set.seed(37)
library(randomForest)
library(stringr)
library(ranger)
# predictor variables
data$peptideLength <- nchar(data$Peptide.Sequence2)
data$unmodA <- str_count(data$Peptide.Sequence2, "A")
data$unmodC <- str_count(data$Peptide.Sequence2, "C")
data$unmodD <- str_count(data$Peptide.Sequence2, "D")
data$unmodE <- str_count(data$Peptide.Sequence2, "E")
data$unmodF <- str_count(data$Peptide.Sequence2, "F")
data$unmodG <- str_count(data$Peptide.Sequence2, "G")
data$unmodH <- str_count(data$Peptide.Sequence2, "H")
data$unmodI <- str_count(data$Peptide.Sequence2, "I")
data$unmodK <- str_count(data$Peptide.Sequence2, "K")
data$unmodL <- str_count(data$Peptide.Sequence2, "L")
data$unmodM <- str_count(data$Peptide.Sequence2, "M")
data$unmodN <- str_count(data$Peptide.Sequence2, "N")
data$unmodP <- str_count(data$Peptide.Sequence2, "P")
data$unmodQ <- str_count(data$Peptide.Sequence2, "Q")
data$unmodR <- str_count(data$Peptide.Sequence2, "R")
data$unmodS <- str_count(data$Peptide.Sequence2, "S")
data$unmodT <- str_count(data$Peptide.Sequence2, "T")
data$unmodV <- str_count(data$Peptide.Sequence2, "V")
data$unmodW <- str_count(data$Peptide.Sequence2, "W")
data$unmodY <- str_count(data$Peptide.Sequence2, "Y")
data$modS <- str_count(data$Peptide.Sequence2, "s")
data$modT <- str_count(data$Peptide.Sequence2, "t")
data$modY <- str_count(data$Peptide.Sequence2, "y")
data$modM <- str_count(data$Peptide.Sequence2, "m")
# peptide sequence no longer needed
data$Peptide.Sequence2 <- NULL
# split data into trainng/testing sets
setAssignments <- sample(1:2, size = nrow(data), prob = c(0.8, 0.2), replace = TRUE)
trainingData <- data[setAssignments == 1,]
testingData <- data[setAssignments == 2,]
# create an empty matrix that will hold the parameter combinations for tuning
matrixToTry <- matrix(,nrow=0,ncol=2)
# fill the parameter matrix with the combinations that will be tried
for (numTrees in c(500, 750, 1000,2000, 3000, 5000, 10000))
{
for (mtry in c(6, 8, 10, 12, 14, 16))
{
matrixToTry <- rbind(matrixToTry, c(numTrees, mtry))
}
}
# creating a data frame to store results of tuning
resultdf <- data.frame(numTrees = numeric(),
mtry = numeric(),
OOB_mse = numeric())
# creating a file to write results to
fileLabelsDF <- data.frame(numtrees = numeric(),
mtry = numeric(),
OOB_mse = numeric())
# write the column names to the file
write.csv(fileLabelsDF,
file = "C:/Users/kbertauche/Downloads/resultsRFFixed.csv",
append = TRUE)
# write the column names to the file
write.csv(fileLabelsDF,
file = "C:/Users/Kurtis/Desktop/retentionTimePrediction/tuning2/resultsRFFixedData2.csv",
append = TRUE)
# tune the model using OOB MSE on 80% of the dataset - keep 20% behind for testing (same as SLR split)
for(row in 1:nrow(matrixToTry))
{
# for consistency, keep seed
set.seed(37)
# rf model call
rfModel <- ranger(
formula   = RetentionTime ~ .,
data      = trainingData,
num.trees = matrixToTry[row, 1],
mtry      = matrixToTry[row, 2],
min.node.size = 5,
num.threads = 24
)
print(rfModel)
# store model stats in data frame
newResult <- data.frame(
matrixToTry[row, 1],
matrixToTry[row, 2],
rfModel$prediction.error
)
# clear model from memory
rm(rfModel)
# write most recent model's stats to file
names(newResult) <- c("numTrees",
"mtry",
"OOB_mse")
write.table(newResult,
file = "C:/Users/kbertauche/Downloads/resultsRFFixed.csv",
append = TRUE,
col.names = FALSE,
sep = ",")
# also keep most recent model's stats in enviornment
resultdf <- rbind(resultdf, newResult)
}
# data <- read.csv(file = "C:/Users/Kurtis/Desktop/Research/data/RetentionTime_HCD_Marx2013_SuppT3.csv")
data <- read.csv(file = "C:/Users/Kurtis/Desktop/Research/RScripts/Updated/dataSetTwoFiltered.csv")
data$X <- NULL
colnames(data) <- c("Peptide.Sequence2", "RetentionTime")
set.seed(37)
library(randomForest)
library(stringr)
library(ranger)
# predictor variables
data$peptideLength <- nchar(data$Peptide.Sequence2)
data$unmodA <- str_count(data$Peptide.Sequence2, "A")
data$unmodC <- str_count(data$Peptide.Sequence2, "C")
data$unmodD <- str_count(data$Peptide.Sequence2, "D")
data$unmodE <- str_count(data$Peptide.Sequence2, "E")
data$unmodF <- str_count(data$Peptide.Sequence2, "F")
data$unmodG <- str_count(data$Peptide.Sequence2, "G")
data$unmodH <- str_count(data$Peptide.Sequence2, "H")
data$unmodI <- str_count(data$Peptide.Sequence2, "I")
data$unmodK <- str_count(data$Peptide.Sequence2, "K")
data$unmodL <- str_count(data$Peptide.Sequence2, "L")
data$unmodM <- str_count(data$Peptide.Sequence2, "M")
data$unmodN <- str_count(data$Peptide.Sequence2, "N")
data$unmodP <- str_count(data$Peptide.Sequence2, "P")
data$unmodQ <- str_count(data$Peptide.Sequence2, "Q")
data$unmodR <- str_count(data$Peptide.Sequence2, "R")
data$unmodS <- str_count(data$Peptide.Sequence2, "S")
data$unmodT <- str_count(data$Peptide.Sequence2, "T")
data$unmodV <- str_count(data$Peptide.Sequence2, "V")
data$unmodW <- str_count(data$Peptide.Sequence2, "W")
data$unmodY <- str_count(data$Peptide.Sequence2, "Y")
data$modS <- str_count(data$Peptide.Sequence2, "s")
data$modT <- str_count(data$Peptide.Sequence2, "t")
data$modY <- str_count(data$Peptide.Sequence2, "y")
data$modM <- str_count(data$Peptide.Sequence2, "m")
# peptide sequence no longer needed
data$Peptide.Sequence2 <- NULL
# split data into trainng/testing sets
setAssignments <- sample(1:2, size = nrow(data), prob = c(0.8, 0.2), replace = TRUE)
trainingData <- data[setAssignments == 1,]
testingData <- data[setAssignments == 2,]
# create an empty matrix that will hold the parameter combinations for tuning
matrixToTry <- matrix(,nrow=0,ncol=2)
# fill the parameter matrix with the combinations that will be tried
for (numTrees in c(500, 750, 1000,2000, 3000, 5000, 10000))
{
for (mtry in c(6, 8, 10, 12, 14, 16))
{
matrixToTry <- rbind(matrixToTry, c(numTrees, mtry))
}
}
# creating a data frame to store results of tuning
resultdf <- data.frame(numTrees = numeric(),
mtry = numeric(),
OOB_mse = numeric())
# creating a file to write results to
fileLabelsDF <- data.frame(numtrees = numeric(),
mtry = numeric(),
OOB_mse = numeric())
# write the column names to the file
write.csv(fileLabelsDF,
file = "C:/Users/kbertauche/Downloads/resultsRFFixed.csv",
append = TRUE)
# write the column names to the file (data 2)
write.csv(fileLabelsDF,
file = "C:/Users/Kurtis/Desktop/retentionTimePrediction/tuning2/rfResultsData2",
append = TRUE)
# tune the model using OOB MSE on 80% of the dataset - keep 20% behind for testing (same as SLR split)
for(row in 1:nrow(matrixToTry))
{
# for consistency, keep seed
set.seed(37)
# rf model call
rfModel <- ranger(
formula   = RetentionTime ~ .,
data      = trainingData,
num.trees = matrixToTry[row, 1],
mtry      = matrixToTry[row, 2],
min.node.size = 5,
num.threads = 24
)
print(rfModel)
# store model stats in data frame
newResult <- data.frame(
matrixToTry[row, 1],
matrixToTry[row, 2],
rfModel$prediction.error
)
# clear model from memory
rm(rfModel)
# write most recent model's stats to file
names(newResult) <- c("numTrees",
"mtry",
"OOB_mse")
#write.table(newResult,
#            file = "C:/Users/kbertauche/Downloads/resultsRFFixed.csv",
#            append = TRUE,
#            col.names = FALSE,
#            sep = ",")
# for data 2
write.table(newResult,
file = "C:/Users/Kurtis/Desktop/retentionTimePrediction/rfResultsData2",
append = TRUE,
col.names = FALSE,
sep = ",")
# also keep most recent model's stats in enviornment
resultdf <- rbind(resultdf, newResult)
}
# data <- read.csv(file = "C:/Users/Kurtis/Desktop/Research/data/RetentionTime_HCD_Marx2013_SuppT3.csv")
data <- read.csv(file = "C:/Users/Kurtis/Desktop/Research/RScripts/Updated/dataSetTwoFiltered.csv")
data$X <- NULL
colnames(data) <- c("Peptide.Sequence2", "RetentionTime")
set.seed(37)
library(randomForest)
library(stringr)
library(ranger)
# predictor variables
data$peptideLength <- nchar(data$Peptide.Sequence2)
data$unmodA <- str_count(data$Peptide.Sequence2, "A")
data$unmodC <- str_count(data$Peptide.Sequence2, "C")
data$unmodD <- str_count(data$Peptide.Sequence2, "D")
data$unmodE <- str_count(data$Peptide.Sequence2, "E")
data$unmodF <- str_count(data$Peptide.Sequence2, "F")
data$unmodG <- str_count(data$Peptide.Sequence2, "G")
data$unmodH <- str_count(data$Peptide.Sequence2, "H")
data$unmodI <- str_count(data$Peptide.Sequence2, "I")
data$unmodK <- str_count(data$Peptide.Sequence2, "K")
data$unmodL <- str_count(data$Peptide.Sequence2, "L")
data$unmodM <- str_count(data$Peptide.Sequence2, "M")
data$unmodN <- str_count(data$Peptide.Sequence2, "N")
data$unmodP <- str_count(data$Peptide.Sequence2, "P")
data$unmodQ <- str_count(data$Peptide.Sequence2, "Q")
data$unmodR <- str_count(data$Peptide.Sequence2, "R")
data$unmodS <- str_count(data$Peptide.Sequence2, "S")
data$unmodT <- str_count(data$Peptide.Sequence2, "T")
data$unmodV <- str_count(data$Peptide.Sequence2, "V")
data$unmodW <- str_count(data$Peptide.Sequence2, "W")
data$unmodY <- str_count(data$Peptide.Sequence2, "Y")
data$modS <- str_count(data$Peptide.Sequence2, "s")
data$modT <- str_count(data$Peptide.Sequence2, "t")
data$modY <- str_count(data$Peptide.Sequence2, "y")
data$modM <- str_count(data$Peptide.Sequence2, "m")
# peptide sequence no longer needed
data$Peptide.Sequence2 <- NULL
# split data into trainng/testing sets
setAssignments <- sample(1:2, size = nrow(data), prob = c(0.8, 0.2), replace = TRUE)
trainingData <- data[setAssignments == 1,]
testingData <- data[setAssignments == 2,]
# create an empty matrix that will hold the parameter combinations for tuning
matrixToTry <- matrix(,nrow=0,ncol=2)
# fill the parameter matrix with the combinations that will be tried
for (numTrees in c(500, 750, 1000,2000, 3000, 5000, 10000))
{
for (mtry in c(6, 8, 10, 12, 14, 16))
{
matrixToTry <- rbind(matrixToTry, c(numTrees, mtry))
}
}
# creating a data frame to store results of tuning
resultdf <- data.frame(numTrees = numeric(),
mtry = numeric(),
OOB_mse = numeric())
# creating a file to write results to
fileLabelsDF <- data.frame(numtrees = numeric(),
mtry = numeric(),
OOB_mse = numeric())
# write the column names to the file
write.csv(fileLabelsDF,
file = "C:/Users/kbertauche/Downloads/resultsRFFixed.csv",
append = TRUE)
# write the column names to the file (data 2)
write.csv(fileLabelsDF,
file = "C:/Users/Kurtis/Desktop/retentionTimePrediction/tuning2/rfResultsData2",
append = TRUE)
# tune the model using OOB MSE on 80% of the dataset - keep 20% behind for testing (same as SLR split)
for(row in 1:nrow(matrixToTry))
{
# for consistency, keep seed
set.seed(37)
# rf model call
rfModel <- ranger(
formula   = RetentionTime ~ .,
data      = trainingData,
num.trees = matrixToTry[row, 1],
mtry      = matrixToTry[row, 2],
min.node.size = 5,
num.threads = 24
)
print(rfModel)
# store model stats in data frame
newResult <- data.frame(
matrixToTry[row, 1],
matrixToTry[row, 2],
rfModel$prediction.error
)
# clear model from memory
rm(rfModel)
# write most recent model's stats to file
names(newResult) <- c("numTrees",
"mtry",
"OOB_mse")
#write.table(newResult,
#            file = "C:/Users/kbertauche/Downloads/resultsRFFixed.csv",
#            append = TRUE,
#            col.names = FALSE,
#            sep = ",")
# for data 2
write.table(newResult,
file = "C:/Users/Kurtis/Desktop/retentionTimePrediction/rfResultsData2.csv",
append = TRUE,
col.names = FALSE,
sep = ",")
# also keep most recent model's stats in enviornment
resultdf <- rbind(resultdf, newResult)
}
library(stringr)
data <- read.csv(file = "C:/Users/Kurtis/Desktop/Research/data/RetentionTime_HCD_Marx2013_SuppT3.csv")
data$Peptide.Sequence2 <- str_replace_all(data$Peptide.Sequence2, "m", "1")
data$Peptide.Sequence2 <- str_replace_all(data$Peptide.Sequence2, "s", "2")
data$Peptide.Sequence2 <- str_replace_all(data$Peptide.Sequence2, "t", "3")
data$Peptide.Sequence2 <- str_replace_all(data$Peptide.Sequence2, "y", "4")
library(stringr)
data <- read.csv(file = "C:/Users/Kurtis/Desktop/Research/data/RetentionTime_HCD_Marx2013_SuppT3.csv")
data$Peptide.Sequence2 <- str_replace_all(data$Peptide.Sequence2, "m", "1")
data$Peptide.Sequence2 <- str_replace_all(data$Peptide.Sequence2, "s", "2")
data$Peptide.Sequence2 <- str_replace_all(data$Peptide.Sequence2, "t", "3")
data$Peptide.Sequence2 <- str_replace_all(data$Peptide.Sequence2, "y", "4")
names(data) <- c("x", "y")
set.seed(37)
setAssignments <- sample(1:2, size = nrow(data), prob = c(0.8, 0.2), replace = TRUE)
trainingData <- data[setAssignments == 1,]
testingData <- data[setAssignments == 2,]
write.table(trainingData,
file = "C:/Users/Kurtis/Downloads/training_DATA_ONE.tsv",
row.names=FALSE,
quote = FALSE,
sep="\t")
write.table(testingData,
file = "C:/Users/Kurtis/Downloads/testing_DATA_ONE.tsv",
row.names=FALSE,
quote = FALSE,
sep="\t")
